// <auto-generated />
using System;
using LadeviVentasApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LadeviVentasApi.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250116172341_UseEuroColumnRenameInCurrencyTable")]
    partial class UseEuroColumnRenameInCurrencyTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.AdvertisingSpaceLocationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("AdvertisingSpaceLocationTypes");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<bool>("ShouldHaveCommission");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRole");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ApplicationRoleId");

                    b.Property<double>("CommisionCoeficient");

                    b.Property<long>("CountryId");

                    b.Property<string>("CredentialsUserId")
                        .IsRequired();

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<string>("FullName")
                        .IsRequired();

                    b.Property<string>("Initials")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CredentialsUserId");

                    b.ToTable("ApplicationUsers");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.Auditory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AuditMessage");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Entity");

                    b.Property<string>("User");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Auditory");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.BillingCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("BillingConditions");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.CheckPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ContractId");

                    b.Property<DateTime>("Date");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<int>("Order");

                    b.Property<double>("Total");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("CheckPayments");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodigoTelefonico");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<long>("DistrictId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("AlternativeEmail");

                    b.Property<long>("ApplicationUserDebtCollectorId");

                    b.Property<long>("ApplicationUserSellerId");

                    b.Property<string>("BillingPointOfSale")
                        .IsRequired();

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("CityId");

                    b.Property<string>("Contact");

                    b.Property<long>("CountryId");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<long?>("DistrictId");

                    b.Property<bool>("ElectronicBillByMail");

                    b.Property<bool>("ElectronicBillByPaper");

                    b.Property<string>("IdentificationValue")
                        .IsRequired();

                    b.Property<bool>("IsAgency");

                    b.Property<bool>("IsComtur");

                    b.Property<bool>("IsEnabled");

                    b.Property<string>("LegalName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MainEmail")
                        .IsRequired();

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<long>("StateId");

                    b.Property<double>("TaxPercentage");

                    b.Property<long>("TaxTypeId");

                    b.Property<string>("TelephoneAreaCode")
                        .HasMaxLength(5);

                    b.Property<string>("TelephoneCountryCode")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasMaxLength(12);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserDebtCollectorId");

                    b.HasIndex("ApplicationUserSellerId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("StateId");

                    b.HasIndex("TaxTypeId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.Contract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ApplyDiscountForCheck");

                    b.Property<bool>("ApplyDiscountForLoyalty");

                    b.Property<bool>("ApplyDiscountForOtherCountry");

                    b.Property<bool>("ApplyDiscountForSameCountry");

                    b.Property<bool>("ApplyDiscountForVolume");

                    b.Property<bool>("AppyDiscountForAgency");

                    b.Property<long>("BillingConditionId");

                    b.Property<long>("BillingCountryId");

                    b.Property<int?>("CheckQuantity");

                    b.Property<long>("ClientId");

                    b.Property<DateTime>("ContractDate");

                    b.Property<long>("CurrencyId");

                    b.Property<double?>("CurrencyParity");

                    b.Property<int?>("DaysBetweenChecks");

                    b.Property<int?>("DaysToFirstPayment");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<double?>("DiscountForAgency");

                    b.Property<double?>("DiscountForCheck");

                    b.Property<double?>("DiscountForLoyalty");

                    b.Property<double?>("DiscountForOtherCountry");

                    b.Property<double?>("DiscountForSameCountry");

                    b.Property<double?>("DiscountForVolume");

                    b.Property<DateTime>("End");

                    b.Property<double?>("IVA");

                    b.Property<string>("InvoiceNumber");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("Number");

                    b.Property<string>("Observations");

                    b.Property<bool?>("PaidOut");

                    b.Property<long>("PaymentMethodId");

                    b.Property<long>("ProductId");

                    b.Property<long>("SellerId");

                    b.Property<DateTime>("Start");

                    b.Property<double>("Total");

                    b.Property<double>("TotalDiscounts");

                    b.Property<double>("TotalTaxes");

                    b.HasKey("Id");

                    b.HasIndex("BillingConditionId");

                    b.HasIndex("BillingCountryId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ContractHistorical", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Changes")
                        .IsRequired();

                    b.Property<long>("ContractId");

                    b.Property<DateTime>("Date");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<string>("User")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("ContractHistoricals");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodigoTelefonico");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CountryId");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<string>("Name");

                    b.Property<bool>("UseEuro");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.CurrencyParity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CurrencyId");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<DateTime>("End");

                    b.Property<double>("LocalCurrencyToDollarExchangeRate");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CurrencyParities");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.District", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("StateId");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.EuroParity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<DateTime>("End");

                    b.Property<double>("EuroToDollarExchangeRate");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.ToTable("EuroParities");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.PaymentMethod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AliquotForSalesCommission");

                    b.Property<long>("CountryId");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<double>("DiscountByManager");

                    b.Property<double>("DiscountForAgency");

                    b.Property<double>("DiscountForCheck");

                    b.Property<double>("DiscountForLoyalty");

                    b.Property<double>("DiscountForOtherCountry");

                    b.Property<double>("DiscountForSameCountry");

                    b.Property<double>("DiscountSpecialBySeller");

                    b.Property<double>("IVA");

                    b.Property<double>("MaxAplicableDiscount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("ProductTypeId");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ProductAdvertisingSpace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<double>("DiscountForAgency");

                    b.Property<double>("DiscountForCheck");

                    b.Property<double>("DiscountForLoyalty");

                    b.Property<double>("DiscountForOtherCountry");

                    b.Property<double>("DiscountForSameCountry");

                    b.Property<double>("DollarPrice");

                    b.Property<double>("Height");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("ProductId");

                    b.Property<bool>("Show");

                    b.Property<double>("Width");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAdvertisingSpaces");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ProductAdvertisingSpaceLocationDiscount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AdvertisingSpaceLocationTypeId");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<double>("Discount");

                    b.Property<long>("ProductAdvertisingSpaceId");

                    b.HasKey("Id");

                    b.HasIndex("ProductAdvertisingSpaceId");

                    b.ToTable("ProductAdvertisingSpaceLocationDiscount");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ProductAdvertisingSpaceVolumeDiscount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<double>("Discount");

                    b.Property<long>("ProductAdvertisingSpaceId");

                    b.Property<long>("RangeEnd");

                    b.Property<long>("RangeStart");

                    b.HasKey("Id");

                    b.HasIndex("ProductAdvertisingSpaceId");

                    b.ToTable("ProductAdvertisingSpaceVolumeDiscount");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ProductCurrencyParity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<DateTime>("End");

                    b.Property<double>("LocalCurrencyToDollarExchangeRate");

                    b.Property<long>("ProductId");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.ToTable("ProductCurrencyParity");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ProductEdition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Closed");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<DateTime>("End");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<long>("ProductId");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductEditions");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ProductLocationDiscount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AdvertisingSpaceLocationTypeId");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<double>("Discount");

                    b.Property<long>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductLocationDiscount");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ProductType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ProductVolumeDiscount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<double>("Discount");

                    b.Property<long>("ProductId");

                    b.Property<long>("RangeEnd");

                    b.Property<long>("RangeStart");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVolumeDiscount");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.PublishingOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AdvertisingSpaceLocationTypeId");

                    b.Property<long>("ClientId");

                    b.Property<long?>("ContractId");

                    b.Property<DateTime?>("CreationDate");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<string>("InvoiceNumber");

                    b.Property<DateTime?>("LastUpdate");

                    b.Property<bool>("Latent");

                    b.Property<string>("Observations");

                    b.Property<string>("PageNumber");

                    b.Property<bool?>("PaidOut");

                    b.Property<long>("ProductAdvertisingSpaceId");

                    b.Property<long>("ProductEditionId");

                    b.Property<double>("Quantity");

                    b.Property<long>("SellerId");

                    b.Property<long?>("SoldSpaceId");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisingSpaceLocationTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ContractId");

                    b.HasIndex("ProductAdvertisingSpaceId");

                    b.HasIndex("ProductEditionId");

                    b.HasIndex("SellerId");

                    b.HasIndex("SoldSpaceId");

                    b.ToTable("PublishingOrders");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<string>("Refreshtoken");

                    b.Property<bool>("Revoked");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ReportOPForProductionExports", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<long>("ProductEditionId");

                    b.HasKey("Id");

                    b.ToTable("ReportOPForProductionExports");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.SoldSpace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AdvertisingSpaceLocationTypeId");

                    b.Property<bool>("ApplyDiscountForCheck");

                    b.Property<bool>("ApplyDiscountForLoyalty");

                    b.Property<bool>("ApplyDiscountForOtherCountry");

                    b.Property<bool>("ApplyDiscountForSameCountry");

                    b.Property<bool>("ApplyDiscountForVolume");

                    b.Property<bool>("AppyDiscountForAgency");

                    b.Property<double>("Balance");

                    b.Property<long>("ContractId");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<string>("DescriptionGerentialDiscount");

                    b.Property<string>("DescriptionSpecialDiscount");

                    b.Property<double?>("DiscountForAgency");

                    b.Property<double?>("DiscountForCheck");

                    b.Property<double?>("DiscountForLoyalty");

                    b.Property<double?>("DiscountForOtherCountry");

                    b.Property<double?>("DiscountForSameCountry");

                    b.Property<double?>("DiscountForVolume");

                    b.Property<double>("GerentialDiscount");

                    b.Property<double>("LocationDiscount");

                    b.Property<long>("ProductAdvertisingSpaceId");

                    b.Property<double>("Quantity");

                    b.Property<double>("SpacePrice");

                    b.Property<double>("SpecialDiscount");

                    b.Property<double>("SubTotal");

                    b.Property<double>("Total");

                    b.Property<double>("TotalDiscounts");

                    b.Property<double>("TotalTaxes");

                    b.Property<short>("TypeGerentialDiscount");

                    b.Property<short?>("TypeSpecialDiscount");

                    b.Property<double>("UnitPriceWithDiscounts");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisingSpaceLocationTypeId");

                    b.HasIndex("ContractId");

                    b.HasIndex("ProductAdvertisingSpaceId");

                    b.ToTable("SoldSpaces");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CountryId");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.TaxType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CountryId");

                    b.Property<bool?>("Deleted");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("DeletedUser");

                    b.Property<bool>("IsIdentificationField");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OptionsInternal");

                    b.Property<long>("Order");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("TaxType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ApplicationUser", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.ApplicationRole", "ApplicationRole")
                        .WithMany()
                        .HasForeignKey("ApplicationRoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "CredentialsUser")
                        .WithMany()
                        .HasForeignKey("CredentialsUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.CheckPayment", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.Contract", "Contract")
                        .WithMany("CheckPayments")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.City", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.Client", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.ApplicationUser", "ApplicationUserDebtCollector")
                        .WithMany()
                        .HasForeignKey("ApplicationUserDebtCollectorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.ApplicationUser", "ApplicationUserSeller")
                        .WithMany()
                        .HasForeignKey("ApplicationUserSellerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("LadeviVentasApi.Models.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("LadeviVentasApi.Models.Domain.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.TaxType", "IdentificationType")
                        .WithMany()
                        .HasForeignKey("TaxTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.Contract", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.BillingCondition", "BillingCondition")
                        .WithMany()
                        .HasForeignKey("BillingConditionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.Country", "BillingCountry")
                        .WithMany()
                        .HasForeignKey("BillingCountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.ApplicationUser", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ContractHistorical", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.Contract")
                        .WithMany("ContractHistoricals")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.CurrencyParity", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.Currency")
                        .WithMany("CurrencyParities")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.District", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.Product", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ProductAdvertisingSpace", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ProductAdvertisingSpaceLocationDiscount", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.ProductAdvertisingSpace")
                        .WithMany("ProductAdvertisingSpaceLocationDiscounts")
                        .HasForeignKey("ProductAdvertisingSpaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ProductAdvertisingSpaceVolumeDiscount", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.ProductAdvertisingSpace")
                        .WithMany("ProductAdvertisingSpaceVolumeDiscounts")
                        .HasForeignKey("ProductAdvertisingSpaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ProductEdition", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ProductLocationDiscount", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.Product")
                        .WithMany("ProductLocationDiscounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.ProductVolumeDiscount", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.Product")
                        .WithMany("ProductVolumeDiscounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.PublishingOrder", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.AdvertisingSpaceLocationType", "AdvertisingSpaceLocationType")
                        .WithMany()
                        .HasForeignKey("AdvertisingSpaceLocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.Contract", "Contract")
                        .WithMany("PublishingOrders")
                        .HasForeignKey("ContractId");

                    b.HasOne("LadeviVentasApi.Models.Domain.ProductAdvertisingSpace", "ProductAdvertisingSpace")
                        .WithMany()
                        .HasForeignKey("ProductAdvertisingSpaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.ProductEdition", "ProductEdition")
                        .WithMany("PublishingOrders")
                        .HasForeignKey("ProductEditionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.ApplicationUser", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.SoldSpace", "SoldSpace")
                        .WithMany()
                        .HasForeignKey("SoldSpaceId");
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.SoldSpace", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.AdvertisingSpaceLocationType", "AdvertisingSpaceLocationType")
                        .WithMany()
                        .HasForeignKey("AdvertisingSpaceLocationTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.Contract")
                        .WithMany("SoldSpaces")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LadeviVentasApi.Models.Domain.ProductAdvertisingSpace", "ProductAdvertisingSpace")
                        .WithMany()
                        .HasForeignKey("ProductAdvertisingSpaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.State", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LadeviVentasApi.Models.Domain.TaxType", b =>
                {
                    b.HasOne("LadeviVentasApi.Models.Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
